// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sevkiyat.Takip.Persistance.Contexts;

#nullable disable

namespace Sevkiyat.Takip.Persistance.Migrations
{
    [DbContext(typeof(SevkiyatContext))]
    partial class SevkiyatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Firma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("adi");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("firmalar_pkey");

                    b.ToTable("firmalar", "isletmeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.FirmaTasit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("FirmaId")
                        .HasColumnType("integer")
                        .HasColumnName("firma_id");

                    b.Property<int>("TasitTipId")
                        .HasColumnType("integer")
                        .HasColumnName("tasit_tip_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("firma_tasitlar_pkey");

                    b.HasIndex(new[] { "FirmaId" }, "IX_firma_tasitlar_firma_id");

                    b.HasIndex(new[] { "TasitTipId" }, "IX_firma_tasitlar_tasit_tip_id");

                    b.ToTable("firma_tasitlar", "isletmeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.FirmaYetkili", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("FirmaId")
                        .HasColumnType("integer")
                        .HasColumnName("firma_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("firma_yetkililer_pkey");

                    b.HasIndex(new[] { "FirmaId" }, "IX_firma_yetkililer_firma_id");

                    b.HasIndex(new[] { "UserId" }, "IX_firma_yetkililer_user_id");

                    b.ToTable("firma_yetkililer", "isletmeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ilan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text")
                        .HasColumnName("aciklama");

                    b.Property<int>("AlinacakIlceId")
                        .HasColumnType("integer")
                        .HasColumnName("alinacak_ilce_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("FirmaId")
                        .HasColumnType("integer")
                        .HasColumnName("firma_id");

                    b.Property<int>("KasaTipiId")
                        .HasColumnType("integer")
                        .HasColumnName("kasa_tipi_id");

                    b.Property<DateTime?>("OnGorülenTeslimTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("on_gorülen_teslim_tarihi");

                    b.Property<int>("TasitTipiId")
                        .HasColumnType("integer")
                        .HasColumnName("tasit_tipi_id");

                    b.Property<int>("TeslimIlceId")
                        .HasColumnType("integer")
                        .HasColumnName("teslim_ilce_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<DateTime>("YukAlimTarihi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("yuk_alim_tarihi");

                    b.Property<int>("YukTipiId")
                        .HasColumnType("integer")
                        .HasColumnName("yuk_tipi_id");

                    b.HasKey("Id")
                        .HasName("ilanlar_pkey");

                    b.HasIndex(new[] { "AlinacakIlceId" }, "IX_ilanlar_alinacak_ilce_id");

                    b.HasIndex(new[] { "FirmaId" }, "IX_ilanlar_firma_id");

                    b.HasIndex(new[] { "KasaTipiId" }, "IX_ilanlar_kasa_tipi_id");

                    b.HasIndex(new[] { "TasitTipiId" }, "IX_ilanlar_tasit_tipi_id");

                    b.HasIndex(new[] { "TeslimIlceId" }, "IX_ilanlar_teslim_ilce_id");

                    b.HasIndex(new[] { "YukTipiId" }, "IX_ilanlar_yuk_tipi_id");

                    b.ToTable("ilanlar", "isletmeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ilce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SehirId")
                        .HasColumnType("integer")
                        .HasColumnName("sehir_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("ilceler_pkey");

                    b.HasIndex(new[] { "SehirId" }, "IX_ilceler_sehir_id");

                    b.ToTable("ilceler", "bolgeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.KasaTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("kasa_tipleri_pkey");

                    b.ToTable("kasa_tipleri", "envanter");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.TokenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adi");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("token_types_pkey");

                    b.ToTable("token_types", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("operation_claims", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Sehir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("UlkeId")
                        .HasColumnType("integer")
                        .HasColumnName("ulke_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("sehirler_pkey");

                    b.HasIndex(new[] { "UlkeId" }, "IX_sehirler_ulke_id");

                    b.ToTable("sehirler", "bolgeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.TasitTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("tasit_tipleri_pkey");

                    b.ToTable("tasit_tipleri", "envanter");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ulke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("kod")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("TelefonKodu")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("telefon_kodu")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("ulkeler_pkey");

                    b.ToTable("ulkeler", "bolgeler");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("text")
                        .HasColumnName("forgot_password_token");

                    b.Property<DateTime?>("ForgotPasswordTokenExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forgot_password_token_expiration");

                    b.Property<bool>("IgnoreTwoFactor")
                        .HasColumnType("boolean")
                        .HasColumnName("ignore_two_factor");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("LastPage")
                        .HasColumnType("text")
                        .HasColumnName("last_page");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Photo")
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiration");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_claim_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("user_operation_claims", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_roles_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("TokenTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("token_type_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_tokens_pkey");

                    b.HasIndex("TokenTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("user_tokens", "accounts");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.YukTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("yuk_tipleri_pkey");

                    b.ToTable("yuk_tipleri", "envanter");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.FirmaTasit", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Firma", "Firma")
                        .WithMany("FirmaTasitlars")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("firma_firma_tasitlar_fk");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.TasitTip", "TasitTip")
                        .WithMany("FirmaTasitlars")
                        .HasForeignKey("TasitTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tasit_tip_firma_tasitlar_fk");

                    b.Navigation("Firma");

                    b.Navigation("TasitTip");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.FirmaYetkili", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Firma", "Firma")
                        .WithMany("FirmaYetkililers")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("firma_firma_yetkili_fk");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.User", "User")
                        .WithMany("FirmaYetkililers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_firma_yetkili_fk");

                    b.Navigation("Firma");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ilan", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Ilce", "AlinacakIlce")
                        .WithMany("IlanlarAlinacakIlces")
                        .HasForeignKey("AlinacakIlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Firma", "Firma")
                        .WithMany("Ilanlars")
                        .HasForeignKey("FirmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.KasaTip", "KasaTipi")
                        .WithMany("Ilanlars")
                        .HasForeignKey("KasaTipiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ilan_kasa_tip_fk");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.TasitTip", "TasitTipi")
                        .WithMany("Ilanlars")
                        .HasForeignKey("TasitTipiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ilan_tasit_tip_fk");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Ilce", "TeslimIlce")
                        .WithMany("IlanlarTeslimIlces")
                        .HasForeignKey("TeslimIlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.YukTip", "YukTipi")
                        .WithMany("Ilanlars")
                        .HasForeignKey("YukTipiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ilan_yuk_tip_fk");

                    b.Navigation("AlinacakIlce");

                    b.Navigation("Firma");

                    b.Navigation("KasaTipi");

                    b.Navigation("TasitTipi");

                    b.Navigation("TeslimIlce");

                    b.Navigation("YukTipi");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ilce", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Sehir", "Sehir")
                        .WithMany("Ilcelers")
                        .HasForeignKey("SehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sehir_ilce_fk");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.OperationClaim", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("operation_claims_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Sehir", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.Ulke", "Ulke")
                        .WithMany("Sehirlers")
                        .HasForeignKey("UlkeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ulke_sehir_fk");

                    b.Navigation("Ulke");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_role_id_fkey");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_user_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.TokenType", "TokenType")
                        .WithMany("UserTokens")
                        .HasForeignKey("TokenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_tokens_token_type_id_fkey");

                    b.HasOne("Sevkiyat.Takip.Domain.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_tokens_user_id_fkey");

                    b.Navigation("TokenType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Firma", b =>
                {
                    b.Navigation("FirmaTasitlars");

                    b.Navigation("FirmaYetkililers");

                    b.Navigation("Ilanlars");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ilce", b =>
                {
                    b.Navigation("IlanlarAlinacakIlces");

                    b.Navigation("IlanlarTeslimIlces");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.KasaTip", b =>
                {
                    b.Navigation("Ilanlars");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.MuhasebeEntities.TokenType", b =>
                {
                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Sehir", b =>
                {
                    b.Navigation("Ilcelers");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.TasitTip", b =>
                {
                    b.Navigation("FirmaTasitlars");

                    b.Navigation("Ilanlars");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.Ulke", b =>
                {
                    b.Navigation("Sehirlers");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.User", b =>
                {
                    b.Navigation("FirmaYetkililers");

                    b.Navigation("UserOperationClaims");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Sevkiyat.Takip.Domain.Entities.YukTip", b =>
                {
                    b.Navigation("Ilanlars");
                });
#pragma warning restore 612, 618
        }
    }
}
